package systemcontract

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/consensus/parlia/vmcaller"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"math"
	"math/big"
)

var (
	govAdmin        = common.HexToAddress("0xce930537a2148b8dc43899ff2e9bcbee0e801c54")
	govAdminTestnet = common.HexToAddress("0xce930537a2148b8dc43899ff2e9bcbee0e801c54")
)

const (
	govCode = "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c80634fb9e9b7116100e3578063e3377eb91161008c578063f851a44011610066578063f851a440146102fd578063fb48270c14610315578063fbb847e11461031d57600080fd5b8063e3377eb9146102e0578063ec0cb33614610201578063f3b1cc67146102f357600080fd5b8063c4d66de8116100bd578063c4d66de81461029a578063c967f90f146102ad578063e08b1d38146102c857600080fd5b80634fb9e9b71461026d57806371a1bb75146102805780639001eed81461028957600080fd5b806319ff1d21116101455780632e4f67e41161011f5780632e4f67e4146102015780633656de211461025157806344f999001461026457600080fd5b806319ff1d211461020b578063232e5ffc14610213578063267822471461022657600080fd5b806305b848101161017657806305b84810146101bf578063158ef93e146101e457806315de360e1461020157600080fd5b8063017c2e881461019257806303fab4f61461019c575b600080fd5b61019a610325565b005b6101ac68056bc75e2d6310000081565b6040519081526020015b60405180910390f35b6101d26101cd366004610fd1565b61037e565b6040516101b696959493929190610ff7565b6000546101f19060ff1681565b60405190151581526020016101b6565b6101ac6201518081565b61019a610523565b61019a610221366004610f12565b610576565b600154610239906001600160a01b031681565b6040516001600160a01b0390911681526020016101b6565b6101d261025f366004610f12565b610788565b61023961c00381565b61019a61027b366004610ef0565b6107fb565b61023961c00281565b6101ac69010f0cf064dd5920000081565b61019a6102a8366004610ef0565b610891565b6102b5600f81565b60405161ffff90911681526020016101b6565b60035460405163ffffffff90911681526020016101b6565b61019a6102ee366004610f2b565b61092d565b6101ac6206270081565b6000546102399061010090046001600160a01b031681565b61019a610ca8565b6002546101ac565b60005460ff1661037c5760405162461bcd60e51b815260206004820152600c60248201527f4e6f7420696e697420796574000000000000000000000000000000000000000060448201526064015b60405180910390fd5b565b600080600080600060606003805490508763ffffffff16106103e25760405162461bcd60e51b815260206004820152601260248201527f496e646578206f7574206f662072616e676500000000000000000000000000006044820152606401610373565b600060038863ffffffff16815481106103fd576103fd611116565b60009182526020918290206040805160c08101825260069093029091018054835260018101549383019390935260028301546001600160a01b039081169183019190915260038301541660608201526004820154608082015260058201805491929160a08401919061046e90611094565b80601f016020809104026020016040519081016040528092919081815260200182805461049a90611094565b80156104e75780601f106104bc576101008083540402835291602001916104e7565b820191906000526020600020905b8154815290600101906020018083116104ca57829003601f168201915b5050509190925250508151602083015160408401516060850151608086015160a090960151939e929d50909b5099509297509550909350505050565b60005460ff161561037c5760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610373565b3341146105c55760405162461bcd60e51b815260206004820152600a60248201527f4d696e6572206f6e6c79000000000000000000000000000000000000000000006044820152606401610373565b60005b6003548110156107845781600382815481106105e6576105e6611116565b90600052602060002090600602016000015414156107725760035461060d9060019061107d565b81146106da57600380546106239060019061107d565b8154811061063357610633611116565b90600052602060002090600602016003828154811061065457610654611116565b6000918252602090912082546006909202019081556001808301549082015560028083015490820180546001600160a01b039283166001600160a01b03199182161790915560038085015490840180549190931691161790556004808301549082015560058083018054918301916106cb90611094565b6106d6929190610d83565b5050505b60038054806106eb576106eb611100565b600082815260208120600660001990930192830201818155600181018290556002810180546001600160a01b03199081169091556003820180549091169055600481018290559061073f6005830182610e0e565b5050905560405182907fc2946e69de813a7cede502a3b315aa221abf9fcca5c7134b0ae6b2c3857cf63d90600090a25050565b8061077c816110cf565b9150506105c8565b5050565b6000806000806000606060028054905087106107e65760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f742065786973740000000000000000000000000000006044820152606401610373565b6000600288815481106103fd576103fd611116565b60005461010090046001600160a01b031633146108475760405162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b6044820152606401610373565b600180546001600160a01b0319166001600160a01b0383169081179091556040517faefcaa6215f99fe8c2f605dd268ee4d23a5b596bbca026e25ce8446187f4f1ba90600090a250565b60005460ff16156108e45760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610373565b6000805460ff196001600160a01b0390931661010002929092167fffffffffffffffffffffff000000000000000000000000000000000000000000909216919091176001179055565b60005461010090046001600160a01b031633146109795760405162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b6044820152606401610373565b6002546040805160c08101825282815260208082018a90526001600160a01b03808a168385015288166060830152608082018790528251601f860182900482028101820190935284835260009260a083019187908790819084018382808284376000920182905250939094525050600280546001810182559152825160069091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81019182556020808501517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf83015560408501517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0830180546001600160a01b039283166001600160a01b03199182161790915560608701517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad18501805491909316911617905560808501517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad283015560a085015180519596508695939450610b2b937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad390930192910190610e4b565b505060038054600181018255600091909152825160069091027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b81019182556020808501517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c83015560408501517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d830180546001600160a01b039283166001600160a01b03199182161790915560608701517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85e8501805491909316911617905560808501517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85f83015560a08501518051869550610c70937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f86001929190910190610e4b565b50506040518391507f2f28cf6eab3be78ec5322050b7c7ce47adc6f2cf957c0a7b7c6d893fcec891d990600090a25050505050505050565b6001546001600160a01b03163314610d025760405162461bcd60e51b815260206004820152600e60248201527f4e65772061646d696e206f6e6c790000000000000000000000000000000000006044820152606401610373565b60018054600080546001600160a01b038084166101009081027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909316929092178084556001600160a01b03199094169094556040519204909216917f7ce7ec0b50378fb6c0186ffb5f48325f6593fcb4ca4386f21861af3129188f5c91a2565b828054610d8f90611094565b90600052602060002090601f016020900481019282610db15760008555610dfe565b82601f10610dc25780548555610dfe565b82800160010185558215610dfe57600052602060002091601f016020900482015b82811115610dfe578254825591600101919060010190610de3565b50610e0a929150610ebf565b5090565b508054610e1a90611094565b6000825580601f10610e2a575050565b601f016020900490600052602060002090810190610e489190610ebf565b50565b828054610e5790611094565b90600052602060002090601f016020900481019282610e795760008555610dfe565b82601f10610e9257805160ff1916838001178555610dfe565b82800160010185558215610dfe579182015b82811115610dfe578251825591602001919060010190610ea4565b5b80821115610e0a5760008155600101610ec0565b80356001600160a01b0381168114610eeb57600080fd5b919050565b600060208284031215610f0257600080fd5b610f0b82610ed4565b9392505050565b600060208284031215610f2457600080fd5b5035919050565b60008060008060008060a08789031215610f4457600080fd5b86359550610f5460208801610ed4565b9450610f6260408801610ed4565b935060608701359250608087013567ffffffffffffffff80821115610f8657600080fd5b818901915089601f830112610f9a57600080fd5b813581811115610fa957600080fd5b8a6020828501011115610fbb57600080fd5b6020830194508093505050509295509295509295565b600060208284031215610fe357600080fd5b813563ffffffff81168114610f0b57600080fd5b8681526000602087818401526001600160a01b03808816604085015280871660608501525084608084015260c060a084015283518060c085015260005b818110156110505785810183015185820160e001528201611034565b8181111561106257600060e083870101525b50601f01601f19169290920160e00198975050505050505050565b60008282101561108f5761108f6110ea565b500390565b600181811c908216806110a857607f821691505b602082108114156110c957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156110e3576110e36110ea565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea164736f6c6343000807000a"
)

type hardForkSysGov struct {
}

func (s *hardForkSysGov) GetName() string {
	return SysGovContractName
}

func (s *hardForkSysGov) Update(config *params.ChainConfig, height *big.Int, state *state.StateDB) (err error) {
	contractCode := common.FromHex(govCode)

	//write govCode to sys contract
	state.SetCode(SysGovContractAddr, contractCode)
	log.Debug("Write code to system contract account", "addr", SysGovContractAddr.String(), "code", govCode)

	return
}

func (s *hardForkSysGov) getAdminByChainId(chainId *big.Int) common.Address {
	if chainId.Cmp(params.MainnetChainConfig.ChainID) == 0 {
		return govAdmin
	}

	return govAdminTestnet
}

func (s *hardForkSysGov) Execute(state *state.StateDB, header *types.Header, chainContext core.ChainContext, config *params.ChainConfig) (err error) {

	method := "initialize"
	data, err := GetInteractiveABI()[SysGovContractName].Pack(method, s.getAdminByChainId(config.ChainID))
	if err != nil {
		log.Error("Can't pack data for initialize", "error", err)
		return err
	}

	msg := types.NewMessage(header.Coinbase, &SysGovContractAddr, 0, new(big.Int), math.MaxUint64, new(big.Int), data, nil, false)
	vmcaller.ExecuteMsg(msg, state, header, chainContext, config)
	//context := core.NewEVMContext(msg, header, chainContext, nil)
	//evm := vm.NewEVM(context, state, config, vm.Config{})
	//
	//_, _, err = evm.Call(vm.AccountRef(msg.From()), *msg.To(), msg.Data(), msg.Gas(), msg.Value())

	return
}
